(deflisten workspaces :initial "[]" "bash ~/.config/eww/scripts/get-workspaces")
(deflisten current_workspace :initial "1" "bash ~/.config/eww/scripts/get-active-workspace")
(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll time :interval "10s"
  "date '+%H:%M %b %d, %Y'")

(defwindow bar
  :monitor 0
  :exclusive true
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "10px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  (bar))

(defwidget bar []
  (centerbox :orientation "h"
    (workspaces)
    (music)
    (tray)
  ))

(defwidget tray []
  (box :class "tray" :orientation "h" :space-evenly false :halign "end"
    (metric :icon ""
            :value volume
            :onchange "wpctl set-volume @DEFAULT_AUDIO_SINK@ {}%")
    (metric :icon ""
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (metric :icon ""
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :onchange "")
    time))

(defwidget workspaces []
  (eventbox :onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${current_workspace}" :class "workspaces-widget"
    (box :class "workspaces" :halign "start"
      (for workspace in workspaces
        (workspace-item :workspace workspace)
      )
    )
  )
)

(defwidget workspace-item [workspace]
  (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
    (box :class "workspace-item ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
      (label :text "${workspace.id}")
    )
  )
)

(defwidget music []
    (box :class "music" :visible {music != ""} 
         :orientation "h"
         :space-evenly false
         :spacing 10
         :halign "center"
        (icon :name "")
      music
    )
)

(defwidget metric [icon value onchange]
  (box :orientation "h"
       :class "metric ${onchange != "" ? "active" : ""}"
       :space-evenly false
    (icon :name icon)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defwidget icon [name]
  (box :class "icon" name)
)