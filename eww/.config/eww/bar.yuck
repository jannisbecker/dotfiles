
(defwindow bar
    :monitor 0
    :exclusive true
    :windowtype "dock"
    :geometry (geometry :x "0%"
                        :y "0%"
                        :width "100%"
                        :height "10px"
                        :anchor "top center")
    :reserve (struts :side "top" :distance "4%")
    (bar))  

(defwidget bar []
    (centerbox :orientation "h"
      (widgets-left)
      (widgets-center)
      (widgets-right)
    ))
  
  (defwidget widgets-left []
    (box :class "widgets-left" :orientation "h" :space-evenly false :halign "start"
      (workspaces)
    )
  )
  
  (defwidget widgets-center []
    (box :class "widgets-center" :orientation "h" :space-evenly false :halign "center"
      (music)
    )
  )
  
  (defwidget widgets-right []
    (box :class "widgets-right" :orientation "h" :space-evenly false :spacing 4 :halign "end"
      (systray :spacing 4 :icon-size 16 :prepend-new true)
      (tray)
      (battery)
      (eventbox :onclick "eww update sidepanel-open='${sidepanel-open? 'false' : 'true'}'"
          time
      )
    )
  )
  
  (defwidget battery []
    (metric :icon ""
            :class "battery ${EWW_BATTERY.BAT0.status == "Charging" ? "charging" : ""}"
            :value {EWW_BATTERY.BAT0.capacity}
            :onchange "")
  )
  
  (defwidget tray []
    (box :class "tray" :space-evenly false
      (metric :icon ""
              :value volume
              :onchange "wpctl set-volume @DEFAULT_AUDIO_SINK@ {}%")
    )
  )
  
  (defwidget workspaces []
    (eventbox :onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${current_workspace}" :class "workspaces-widget"
      (box :class "workspaces" :halign "start"
        (for workspace in workspaces
          (workspace-item :workspace workspace)
        )
      )
    )
  )
  
  (defwidget workspace-item [workspace]
    (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
      (box :class "workspace-item ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
        (label :text "${workspace.id}")
      )
    )
  )
  
  (defwidget music []
      (box :class "music" :visible {music != ""} 
           :orientation "h"
           :space-evenly false
           :spacing 10
           :halign "center"
          (icon :name "")
        music
      )
  )
  
  (defwidget metric [icon value onchange ?class]
    (box :orientation "h"
         :class "metric ${onchange != "" ? "active" : ""} ${class}"
         :space-evenly false
      (icon :name icon)
      (scale :min 0
             :max 101
             :active {onchange != ""}
             :value value
             :onchange onchange)))
  
  (defwidget icon [name]
    (box :class "icon" name)
  )